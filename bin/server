#!/usr/bin/env node
'use strict';
const restWrapper = require('rest-wrapper');
const Const = require('../lib/const');
const path  = require('path');
const uuid = require('uuid-js');
const commandLineArgs = require('command-line-args')
const getUsage = require('command-line-usage')
const logger = require('../lib/logger')
const config = require('../lib/config')
const json = require('../lib/json')
const co = require('co')
const optionDefinitions = [
  { name: 'help', alias: 'h', type: Boolean, defaultOption: true, description: 'Print this usage guide.' },
  { name: 'verbose', alias: 'v', type: Boolean, description: 'Print more information.'},
  { name: 'config', alias: 'c', type: String, description: 'Specify configuration file to start.' },
  { name: 'redis', alias: 'r', type: String, description: 'Redis information, default is localhost:6379'},
  { name: 'port', alias: 'p', type: String, description: 'Configuration server listening port, default is 9011.'},
  { name: 'timeout', alias: 't', type: Number, description: 'Action timeout, default is 10 seconds.' }
]
const options = commandLineArgs(optionDefinitions)
process.on('uncaughtException', (err) => {
  logger.error('Unhandled error', err);
});
if ( options.help ) {
  const sections = [
    {
      header: 'Configuration server',
      content: 'Manage configuration and nodes.'
    },
    {
      header: 'Options',
      optionList: optionDefinitions
    }
  ]
  const usage = getUsage(sections)
  console.log(usage);
  process.exit(1);
}
logger.setDebug(!!options.verbose);
if ( options.redis ) {
  var items = options.redis.split(':');
  options.redis = { host: items[0] };
  if ( items[1] ) option.redis.port = parseInt(items[1]);
}
{
  config.initialize(options);
  var port = options.port || process.env.PORT || Const.DEFAULT_PORT;
  var server = restWrapper({
    port: port,
    http: { /*static: path.join(__dirname, '../www')*/ },
    ws: true
  });
  server.route(path.join(__dirname, '../rest'));
  server.routeWS(path.join(__dirname, '../ws'));
  logger.info('Starting configuration server on port '+port);

  if ( options.config ) {
    const loadConfig = require('../lib/loader');
    co(function*(){
      yield config.clear();
      var content = yield loadConfig(options.config);
      var data = json.parse(content);
      for ( var service in data ) {
        var cfg = data[service];
        logger.info('adding service', service);
        yield config.set(service, cfg);
      }
    }).catch((err)=>{
      logger.error('loading configuration['+options.config+'] error', err);
    })
  }
}
